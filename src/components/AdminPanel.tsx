import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import OpenAI from 'openai';
import { chatAPI, type SignalFragment } from '../lib/supabase';
import { selectRandomFragment, generateFragmentId, personalizeFragment, getRarityColor } from '../lib/fragmentContent';

interface Zone {
  id: string;
  title: string;
  description: string;
  tagline: string;
  emoji: string;
  projects: string[];
}

interface Project {
  id: string;
  title: string;
  type: 'comic-series' | 'app' | 'interactive' | 'demo';
  status: 'live' | 'development' | 'planned';
  zone: string;
  description: string;
  url?: string;
  githubUrl?: string;
  autoGenerated?: boolean;
}

interface Settings {
  titleFont: string;
  bodyFont: string;
  primaryColor: string;
  backgroundColor: string;
  textColor: string;
  spiritCount: number;
  transitionDuration: number;
}

const AdminPanel: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'dashboard' | 'zones' | 'projects' | 'database' | 'settings' | 'preview'>('dashboard');
  const [zones, setZones] = useState<Zone[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [fragments, setFragments] = useState<SignalFragment[]>([]);
  const [chatMessages, setChatMessages] = useState<any[]>([]);
  const [chatUsers, setChatUsers] = useState<any[]>([]);
  const [fragmentStats, setFragmentStats] = useState({
    total: 0,
    active: 0,
    claimed: 0,
    expired: 0
  });
  const [dbStats, setDbStats] = useState({
    messages: 0,
    users: 0,
    fragments: 0,
    pickups: 0
  });
  const [settings, setSettings] = useState<Settings>({
    titleFont: 'Space Mono',
    bodyFont: 'Space Mono', 
    primaryColor: '#22c55e',
    backgroundColor: '#000000',
    textColor: '#e5e7eb',
    spiritCount: 65,
    transitionDuration: 400
  });
  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');
  const [selectedZone, setSelectedZone] = useState<string | null>(null);
  const [showHelp, setShowHelp] = useState(false);
  const [draggedProject, setDraggedProject] = useState<string | null>(null);
  const [showInfoPanel, setShowInfoPanel] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [isFirstVisit, setIsFirstVisit] = useState(true);
  const [showOnboarding, setShowOnboarding] = useState(false);
  const [analyzingRepo, setAnalyzingRepo] = useState<string | null>(null);
  const [openaiApiKey, setOpenaiApiKey] = useState<string>('');
  const [quickGithubUrl, setQuickGithubUrl] = useState<string>('');
  const [creatingProject, setCreatingProject] = useState(false);

  // Auto-save functionality
  useEffect(() => {
    const timer = setTimeout(() => {
      if (saveStatus === 'saved') setSaveStatus('idle');
    }, 2000);
    return () => clearTimeout(timer);
  }, [saveStatus]);

  // Load existing data
  useEffect(() => {
    loadData();
    loadAllDatabaseData();
    // Check if first visit
    const hasVisited = localStorage.getItem('scrollspace-admin-visited');
    if (!hasVisited) {
      setShowOnboarding(true);
      localStorage.setItem('scrollspace-admin-visited', 'true');
    } else {
      setIsFirstVisit(false);
    }
    
    // Load OpenAI API key from localStorage
    const savedApiKey = localStorage.getItem('scrollspace-openai-key');
    if (savedApiKey) {
      setOpenaiApiKey(savedApiKey);
    }
  }, []);

  const loadData = async () => {
    try {
      // In real implementation, this would fetch from your API/files
      const mockZones: Zone[] = [
        { id: 'laugh-loop', title: 'The Laugh Loop', description: 'Comedy zone', tagline: 'Joy as system', emoji: '😂', projects: ['therapygpt'] },
        { id: 'neural-nexus', title: 'Neural Nexus', description: 'AI collaboration', tagline: 'Mind meets machine', emoji: '🧠', projects: [] },
        { id: 'grove', title: 'The Grove', description: 'Creative space', tagline: 'Growth through creation', emoji: '🌿', projects: [] }
      ];
      const mockProjects: Project[] = [
        { id: 'therapygpt', title: 'TherapyGPT', type: 'comic-series', status: 'live', zone: 'laugh-loop', description: 'AI therapy comics' }
      ];
      setZones(mockZones);
      setProjects(mockProjects);
    } catch (error) {
      console.error('Failed to load data:', error);
    }
  };

  const loadFragments = async () => {
    try {
      // Load all fragments for admin view
      const { data: allFragments, error } = await chatAPI.supabase
        .from('signal_fragments')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Failed to load fragments:', error);
        return;
      }

      setFragments(allFragments || []);
      
      // Calculate stats
      const now = new Date().toISOString();
      const stats = {
        total: allFragments?.length || 0,
        active: allFragments?.filter(f => f.available && f.expires_at > now).length || 0,
        claimed: allFragments?.filter(f => !f.available && f.claimed_by).length || 0,
        expired: allFragments?.filter(f => f.available && f.expires_at <= now).length || 0
      };
      setFragmentStats(stats);
    } catch (error) {
      console.error('Failed to load fragments:', error);
    }
  };

  const loadAllDatabaseData = async () => {
    await Promise.all([
      loadFragments(),
      loadChatMessages(),
      loadChatUsers(),
      loadDatabaseStats()
    ]);
  };

  const loadChatMessages = async () => {
    try {
      const { data: messages, error } = await chatAPI.supabase
        .from('chat_messages')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(100);

      if (error) {
        console.error('Failed to load chat messages:', error);
        return;
      }

      setChatMessages(messages || []);
    } catch (error) {
      console.error('Failed to load chat messages:', error);
    }
  };

  const loadChatUsers = async () => {
    try {
      const { data: users, error } = await chatAPI.supabase
        .from('chat_users')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Failed to load chat users:', error);
        return;
      }

      setChatUsers(users || []);
    } catch (error) {
      console.error('Failed to load chat users:', error);
    }
  };

  const loadDatabaseStats = async () => {
    try {
      const [messagesCount, usersCount, fragmentsCount, pickupsCount] = await Promise.all([
        chatAPI.supabase.from('chat_messages').select('*', { count: 'exact', head: true }),
        chatAPI.supabase.from('chat_users').select('*', { count: 'exact', head: true }),
        chatAPI.supabase.from('signal_fragments').select('*', { count: 'exact', head: true }),
        chatAPI.supabase.from('fragment_pickups').select('*', { count: 'exact', head: true })
      ]);

      setDbStats({
        messages: messagesCount.count || 0,
        users: usersCount.count || 0,
        fragments: fragmentsCount.count || 0,
        pickups: pickupsCount.count || 0
      });
    } catch (error) {
      console.error('Failed to load database stats:', error);
    }
  };

  const clearChatHistory = async () => {
    if (!confirm('⚠️ This will delete ALL chat messages. Are you sure?')) return;
    
    try {
      const { error } = await chatAPI.supabase
        .from('chat_messages')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');

      if (error) throw error;
      
      setChatMessages([]);
      setSaveStatus('saved');
    } catch (error) {
      console.error('Failed to clear chat history:', error);
    }
  };

  const clearAllUsers = async () => {
    if (!confirm('⚠️ This will disconnect ALL users. Are you sure?')) return;
    
    try {
      await chatAPI.clearAllUsers();
      setChatUsers([]);
      setSaveStatus('saved');
    } catch (error) {
      console.error('Failed to clear users:', error);
    }
  };

  const exportDatabaseData = async () => {
    try {
      const [messages, users, fragments, pickups] = await Promise.all([
        chatAPI.supabase.from('chat_messages').select('*'),
        chatAPI.supabase.from('chat_users').select('*'),
        chatAPI.supabase.from('signal_fragments').select('*'),
        chatAPI.supabase.from('fragment_pickups').select('*')
      ]);

      const exportData = {
        exported_at: new Date().toISOString(),
        scrollspace_data: {
          chat_messages: messages.data || [],
          chat_users: users.data || [],
          signal_fragments: fragments.data || [],
          fragment_pickups: pickups.data || []
        }
      };

      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `scrollspace-export-${new Date().toISOString().split('T')[0]}.json`;
      a.click();
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Failed to export data:', error);
    }
  };

  const dropFragment = async () => {
    try {
      const template = selectRandomFragment();
      const fragmentId = generateFragmentId();
      const expiresAt = new Date(Date.now() + 30000).toISOString(); // 30 seconds

      await chatAPI.dropFragment({
        fragment_id: fragmentId,
        content: template.content,
        content_type: template.type,
        rarity: template.rarity,
        available: true,
        expires_at: expiresAt
      });

      // Reload fragments
      loadFragments();
      setSaveStatus('saved');
    } catch (error) {
      console.error('Failed to drop fragment:', error);
    }
  };

  const clearExpiredFragments = async () => {
    try {
      await chatAPI.cleanupExpiredFragments();
      loadFragments();
      setSaveStatus('saved');
    } catch (error) {
      console.error('Failed to clear expired fragments:', error);
    }
  };

  const saveData = async () => {
    setSaveStatus('saving');
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Generate YAML files
      await generateZoneFiles();
      await generateProjectFiles();
      
      setSaveStatus('saved');
    } catch (error) {
      setSaveStatus('error');
      console.error('Save failed:', error);
    }
  };

  const generateZoneFiles = async () => {
    zones.forEach(zone => {
      const yamlContent = `title: "${zone.title}"
description: "${zone.description}"
tagline: "${zone.tagline}"
emoji: "${zone.emoji}"
projects:
${zone.projects.map(p => `  - ${p}`).join('\n')}`;
      
      console.log(`Generated ${zone.id}.yaml:`, yamlContent);
      // In real implementation: write to file system or API
    });
  };

  const generateProjectFiles = async () => {
    for (const project of projects) {
      const markdownContent = await generateProjectMarkdown(project);
      console.log(`Generated ${project.id}.md:`, markdownContent);
      // In real implementation: write to file system or API
    }
  };

  const generateProjectMarkdown = async (project: Project) => {
    if (project.autoGenerated && project.githubUrl && openaiApiKey) {
      // Generate enhanced markdown with AI-summarized README
      try {
        const match = project.githubUrl.match(/github\.com\/([^/]+)\/([^/]+)/);
        if (match) {
          const [, owner, repo] = match;
          const repoData = await fetchGithubRepoData(owner, repo);
          const summarizedReadme = await summarizeReadmeWithAI(repoData.readme, project.title);
          
          return `# ${project.title}

> ${project.description}

## About This Project

${summarizedReadme}

## Project Details

- **Status:** ${project.status.toUpperCase()}
- **Type:** ${project.type.replace('-', ' ').toUpperCase()}
- **Zone:** ${zones.find(z => z.id === project.zone)?.title || 'Unknown'}
- **Language:** ${repoData.language || 'Multiple'}
- **Stars:** ⭐ ${repoData.stars}

## Links

${project.url ? `🚀 [Live Demo](${project.url})\n` : ''}🔗 [GitHub Repository](${project.githubUrl})
${repoData.homepage ? `🌐 [Project Homepage](${repoData.homepage})\n` : ''}

---

*Project details auto-generated from GitHub repository analysis using AI.*`;
        }
      } catch (error) {
        console.error('Failed to generate enhanced markdown:', error);
      }
    }
    
    // Fallback to basic markdown
    return `# ${project.title}

> ${project.description}

## Status: ${project.status.toUpperCase()}

${project.url ? `[Live Demo](${project.url})` : ''}
${project.githubUrl ? `\n[GitHub Repository](${project.githubUrl})` : ''}
${project.autoGenerated ? '\n\n*Project details auto-generated from GitHub repository analysis.*' : ''}`;
  };

  const summarizeReadmeWithAI = async (readme: string, projectTitle: string) => {
    if (!readme || !openaiApiKey) return 'No description available.';
    
    const openai = new OpenAI({
      apiKey: openaiApiKey,
      dangerouslyAllowBrowser: true
    });

    const prompt = `Summarize this README for a project called "${projectTitle}" in a theme park portfolio website. Make it engaging and visitor-friendly, highlighting key features and what makes this project special. Keep it 2-3 paragraphs maximum.

README Content:
${readme.substring(0, 4000)}`;

    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
        max_tokens: 300
      });

      return completion.choices[0].message.content || 'No description available.';
    } catch (error) {
      console.error('Failed to summarize README:', error);
      return 'No description available.';
    }
  };

  const addZone = () => {
    const newZone: Zone = {
      id: `zone-${Date.now()}`,
      title: 'New Zone',
      description: 'Zone description',
      tagline: 'Zone tagline',
      emoji: '🎮',
      projects: []
    };
    setZones([...zones, newZone]);
    setSaveStatus('idle');
  };

  const addProject = () => {
    const newProject: Project = {
      id: `project-${Date.now()}`,
      title: 'New Project',
      type: 'demo',
      status: 'planned',
      zone: zones[0]?.id || '',
      description: 'Project description'
    };
    setProjects([...projects, newProject]);
    setSaveStatus('idle');
  };

  const deleteZone = (zoneId: string) => {
    if (confirm('Delete this zone? This will also remove all its projects.')) {
      setZones(zones.filter(z => z.id !== zoneId));
      setProjects(projects.filter(p => p.zone !== zoneId));
      setSaveStatus('idle');
    }
  };

  const deleteProject = (projectId: string) => {
    if (confirm('Delete this project?')) {
      setProjects(projects.filter(p => p.id !== projectId));
      setSaveStatus('idle');
    }
  };

  const moveProjectToZone = (projectId: string, newZoneId: string) => {
    setProjects(projects.map(p => 
      p.id === projectId ? { ...p, zone: newZoneId } : p
    ));
    setSaveStatus('idle');
  };

  const analyzeGithubRepo = async (projectId: string) => {
    const project = projects.find(p => p.id === projectId);
    if (!project?.githubUrl) {
      alert('Please enter a GitHub URL first');
      return;
    }

    if (!openaiApiKey) {
      alert('Please configure your OpenAI API key in Settings first');
      setActiveTab('settings');
      return;
    }

    setAnalyzingRepo(projectId);
    try {
      // Extract repo info from URL
      const match = project.githubUrl.match(/github\.com\/([^/]+)\/([^/]+)/); 
      if (!match) {
        alert('Invalid GitHub URL format');
        return;
      }

      const [, owner, repo] = match;
      
      // Fetch repository data from GitHub API
      const repoData = await fetchGithubRepoData(owner, repo);
      
      // Analyze with OpenAI GPT-4
      const aiAnalysis = await analyzeWithOpenAI(repoData, owner, repo);
      
      const updated = projects.map(p => 
        p.id === projectId ? { 
          ...p, 
          description: aiAnalysis.description,
          type: aiAnalysis.type,
          autoGenerated: true,
          title: p.title === 'New Project' ? aiAnalysis.title : p.title
        } : p
      );
      
      setProjects(updated);
      setSaveStatus('idle');
      
    } catch (error) {
      console.error('GitHub analysis failed:', error);
      alert(`Failed to analyze repository: ${error.message}`);
    } finally {
      setAnalyzingRepo(null);
    }
  };

  const fetchGithubRepoData = async (owner: string, repo: string) => {
    // Fetch repository information
    const repoResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}`);
    if (!repoResponse.ok) {
      throw new Error('Repository not found or not accessible');
    }
    const repoInfo = await repoResponse.json();

    // Fetch README.md
    let readmeContent = '';
    try {
      const readmeResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/readme`);
      if (readmeResponse.ok) {
        const readmeData = await readmeResponse.json();
        readmeContent = atob(readmeData.content);
      }
    } catch (error) {
      console.log('No README found');
    }

    // Fetch package.json for tech stack info
    let packageJson = null;
    try {
      const packageResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/contents/package.json`);
      if (packageResponse.ok) {
        const packageData = await packageResponse.json();
        packageJson = JSON.parse(atob(packageData.content));
      }
    } catch (error) {
      console.log('No package.json found');
    }

    return {
      name: repoInfo.name,
      description: repoInfo.description,
      language: repoInfo.language,
      topics: repoInfo.topics || [],
      stars: repoInfo.stargazers_count,
      forks: repoInfo.forks_count,
      readme: readmeContent,
      packageJson,
      homepage: repoInfo.homepage
    };
  };

  const analyzeWithOpenAI = async (repoData: any, owner: string, repo: string) => {
    const openai = new OpenAI({
      apiKey: openaiApiKey,
      dangerouslyAllowBrowser: true
    });

    const prompt = `Analyze this GitHub repository and generate compelling project information for a theme park-style portfolio website.

Repository: ${owner}/${repo}
Name: ${repoData.name}
Description: ${repoData.description || 'No description'}
Language: ${repoData.language || 'Unknown'}
Topics: ${repoData.topics.join(', ') || 'None'}
Stars: ${repoData.stars}
Tech Stack: ${repoData.packageJson ? Object.keys(repoData.packageJson.dependencies || {}).slice(0, 10).join(', ') : 'Unknown'}

README Content (first 2000 chars):
${repoData.readme.substring(0, 2000)}

Please generate:
1. A compelling 2-3 sentence description that would excite visitors to this "ride" in a theme park
2. A properly formatted title (convert kebab-case to Title Case)
3. The best project type from: comic-series, app, interactive, demo

Respond in JSON format:
{
  "title": "Project Title",
  "description": "Exciting description...",
  "type": "app"
}`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
      max_tokens: 500
    });

    const response = completion.choices[0].message.content;
    try {
      return JSON.parse(response);
    } catch (error) {
      throw new Error('Failed to parse AI response');
    }
  };

  const createProjectFromGithub = async (githubUrl: string) => {
    if (!githubUrl) {
      alert('Please enter a GitHub URL');
      return;
    }

    if (!openaiApiKey) {
      alert('Please configure your OpenAI API key in Settings first');
      setActiveTab('settings');
      return;
    }

    setCreatingProject(true);
    try {
      // Extract repo info from URL
      const match = githubUrl.match(/github\.com\/([^/]+)\/([^/]+)/);
      if (!match) {
        alert('Invalid GitHub URL format');
        return;
      }

      const [, owner, repo] = match;
      
      // Create new project with temporary ID
      const projectId = `github-${Date.now()}`;
      const tempProject: Project = {
        id: projectId,
        title: 'Analyzing...',
        type: 'app',
        status: 'planned',
        zone: zones[0]?.id || '',
        description: 'AI is analyzing this repository...',
        githubUrl: githubUrl,
        autoGenerated: true
      };
      
      // Add to projects list immediately
      setProjects([...projects, tempProject]);
      setActiveTab('projects');
      
      // Fetch repository data
      const repoData = await fetchGithubRepoData(owner, repo);
      
      // Analyze with OpenAI
      const aiAnalysis = await analyzeWithOpenAI(repoData, owner, repo);
      
      // Update project with AI analysis
      const finalProject: Project = {
        ...tempProject,
        title: aiAnalysis.title,
        description: aiAnalysis.description,
        type: aiAnalysis.type,
        url: repoData.homepage || undefined
      };
      
      // Update projects list
      setProjects(prev => prev.map(p => 
        p.id === projectId ? finalProject : p
      ));
      
      // Auto-generate the project markdown file
      const markdownContent = await generateProjectMarkdown(finalProject);
      console.log(`Auto-generated project file for ${finalProject.title}:`, markdownContent);
      
      // Clear the input
      setQuickGithubUrl('');
      setSaveStatus('idle');
      
      // Show success message
      alert(`🎉 Successfully created project: ${finalProject.title}`);
      
    } catch (error) {
      console.error('Failed to create project from GitHub:', error);
      alert(`Failed to create project: ${error.message}`);
      
      // Remove the temporary project on error
      setProjects(prev => prev.filter(p => p.githubUrl !== githubUrl));
    } finally {
      setCreatingProject(false);
    }
  };

  const generateAIDescription = (repo: string, owner: string): string => {
    // Simulated AI analysis - in real implementation, this would:
    // 1. Fetch README.md from GitHub API
    // 2. Analyze package.json/requirements.txt for dependencies
    // 3. Use AI to generate compelling description
    
    const repoLower = repo.toLowerCase();
    
    if (repoLower.includes('comic') || repoLower.includes('therapy')) {
      return `AI-powered comic generation system featuring ${repo}. This innovative project combines machine learning with creative storytelling to produce engaging comic content. Built with modern web technologies and AI integration.`;
    } else if (repoLower.includes('api') || repoLower.includes('backend')) {
      return `Robust backend API system for ${repo}. Provides scalable server-side functionality with modern architecture patterns. Features comprehensive endpoints and optimized performance.`;
    } else if (repoLower.includes('web') || repoLower.includes('app')) {
      return `Interactive web application - ${repo}. Modern frontend experience built with cutting-edge technologies. Features responsive design and seamless user interactions.`;
    } else if (repoLower.includes('bot') || repoLower.includes('ai')) {
      return `Intelligent automation system - ${repo}. AI-powered tool that enhances productivity through smart automation. Integrates machine learning for optimal performance.`;
    } else {
      return `Innovative project: ${repo} by ${owner}. This cutting-edge development showcases modern software engineering practices with focus on performance, scalability, and user experience.`;
    }
  };

  const inferProjectType = (repo: string): Project['type'] => {
    const repoLower = repo.toLowerCase();
    
    if (repoLower.includes('comic') || repoLower.includes('therapy')) {
      return 'comic-series';
    } else if (repoLower.includes('demo') || repoLower.includes('example')) {
      return 'demo';
    } else if (repoLower.includes('interactive') || repoLower.includes('game')) {
      return 'interactive';
    } else {
      return 'app';
    }
  };

  const formatRepoName = (repo: string): string => {
    return repo
      .replace(/[-_]/g, ' ')
      .replace(/\b\w/g, l => l.toUpperCase());
  };

  const filteredZones = zones.filter(zone => 
    zone.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    zone.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const filteredProjects = projects.filter(project =>
    project.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    project.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const renderInfoPanel = () => {
    if (!showInfoPanel) return null;

    let content;
    switch (showInfoPanel) {
      case 'zones':
        content = (
          <div>
            <h3 className="text-xl font-mono text-green-400 mb-4">Active Zones ({zones.length})</h3>
            <div className="space-y-3">
              {zones.map(zone => (
                <div key={zone.id} className="bg-gray-700 rounded-lg p-3 flex items-center space-x-3">
                  <div className="text-2xl">{zone.emoji}</div>
                  <div className="flex-1">
                    <div className="font-mono font-bold text-white">{zone.title}</div>
                    <div className="font-mono text-sm text-gray-400">{zone.description}</div>
                    <div className="font-mono text-xs text-green-400">{zone.projects.length} projects</div>
                  </div>
                  <button 
                    onClick={() => {setActiveTab('zones'); setShowInfoPanel(null);}}
                    className="bg-green-600 hover:bg-green-500 text-black px-3 py-1 rounded font-mono text-sm"
                  >
                    Edit
                  </button>
                </div>
              ))}
            </div>
          </div>
        );
        break;
      case 'projects':
        content = (
          <div>
            <h3 className="text-xl font-mono text-blue-400 mb-4">All Projects ({projects.length})</h3>
            <div className="space-y-3">
              {projects.map(project => (
                <div key={project.id} className="bg-gray-700 rounded-lg p-3 flex items-center space-x-3">
                  <div className={`w-3 h-3 rounded-full ${
                    project.status === 'live' ? 'bg-green-400' :
                    project.status === 'development' ? 'bg-yellow-400' : 'bg-gray-400'
                  }`}></div>
                  <div className="flex-1">
                    <div className="font-mono font-bold text-white">{project.title}</div>
                    <div className="font-mono text-sm text-gray-400">{project.description}</div>
                    <div className="font-mono text-xs text-blue-400">{project.type} • {project.status}</div>
                  </div>
                  <button 
                    onClick={() => {setActiveTab('projects'); setShowInfoPanel(null);}}
                    className="bg-blue-600 hover:bg-blue-500 text-white px-3 py-1 rounded font-mono text-sm"
                  >
                    Edit
                  </button>
                </div>
              ))}
            </div>
          </div>
        );
        break;
      case 'live':
        const liveProjects = projects.filter(p => p.status === 'live');
        content = (
          <div>
            <h3 className="text-xl font-mono text-yellow-400 mb-4">Live Projects ({liveProjects.length})</h3>
            <div className="space-y-3">
              {liveProjects.map(project => (
                <div key={project.id} className="bg-gray-700 rounded-lg p-3 flex items-center space-x-3">
                  <div className="w-3 h-3 rounded-full bg-green-400"></div>
                  <div className="flex-1">
                    <div className="font-mono font-bold text-white">{project.title}</div>
                    <div className="font-mono text-sm text-gray-400">{project.description}</div>
                    <div className="font-mono text-xs text-yellow-400">Zone: {zones.find(z => z.id === project.zone)?.title}</div>
                  </div>
                  <div className="flex space-x-2">
                    <a href={`/projects/${project.id}`} target="_blank" className="bg-green-600 hover:bg-green-500 text-black px-3 py-1 rounded font-mono text-sm">
                      View
                    </a>
                    <button 
                      onClick={() => {setActiveTab('projects'); setShowInfoPanel(null);}}
                      className="bg-yellow-600 hover:bg-yellow-500 text-black px-3 py-1 rounded font-mono text-sm"
                    >
                      Edit
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        );
        break;
      case 'spirits':
        content = (
          <div>
            <h3 className="text-xl font-mono text-purple-400 mb-4">Signal Spirits ({settings.spiritCount})</h3>
            <div className="space-y-4">
              <div className="bg-gray-700 rounded-lg p-4">
                <div className="font-mono text-white mb-2">Current Configuration:</div>
                <div className="grid grid-cols-2 gap-4 font-mono text-sm">
                  <div>
                    <span className="text-gray-400">Count:</span> 
                    <span className="text-purple-400 ml-2">{settings.spiritCount} spirits</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Transition:</span> 
                    <span className="text-purple-400 ml-2">{settings.transitionDuration}ms</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Mouse Attraction:</span> 
                    <span className="text-purple-400 ml-2">150px radius</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Colors:</span> 
                    <span className="text-purple-400 ml-2">Blue/Teal/White</span>
                  </div>
                </div>
              </div>
              <div className="bg-gray-700 rounded-lg p-4">
                <div className="font-mono text-white mb-2">Performance:</div>
                <div className="font-mono text-sm text-gray-400">
                  Running at 60fps • ~2MB memory • Canvas-based rendering
                </div>
              </div>
              <button 
                onClick={() => {setActiveTab('settings'); setShowInfoPanel(null);}}
                className="bg-purple-600 hover:bg-purple-500 text-white px-4 py-2 rounded font-mono"
              >
                Adjust Settings
              </button>
            </div>
          </div>
        );
        break;
      case 'database':
        content = (
          <div>
            <h3 className="text-xl font-mono text-cyan-400 mb-4">Database Overview</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
              <div className="bg-gray-700 rounded-lg p-3 text-center">
                <div className="text-xl font-mono font-bold text-cyan-400">{dbStats.messages}</div>
                <div className="text-xs font-mono text-gray-400">Messages</div>
              </div>
              <div className="bg-gray-700 rounded-lg p-3 text-center">
                <div className="text-xl font-mono font-bold text-green-400">{dbStats.users}</div>
                <div className="text-xs font-mono text-gray-400">Users</div>
              </div>
              <div className="bg-gray-700 rounded-lg p-3 text-center">
                <div className="text-xl font-mono font-bold text-purple-400">{dbStats.fragments}</div>
                <div className="text-xs font-mono text-gray-400">Fragments</div>
              </div>
              <div className="bg-gray-700 rounded-lg p-3 text-center">
                <div className="text-xl font-mono font-bold text-yellow-400">{dbStats.pickups}</div>
                <div className="text-xs font-mono text-gray-400">Pickups</div>
              </div>
            </div>
            <div className="flex space-x-2 mb-4">
              <button 
                onClick={() => {setActiveTab('database'); setShowInfoPanel(null);}}
                className="bg-cyan-600 hover:bg-cyan-500 text-white px-4 py-2 rounded font-mono"
              >
                🗄️ Full Database
              </button>
              <button 
                onClick={exportDatabaseData}
                className="bg-green-600 hover:bg-green-500 text-black px-4 py-2 rounded font-mono"
              >
                📥 Export Data
              </button>
              <button 
                onClick={loadAllDatabaseData}
                className="bg-blue-600 hover:bg-blue-500 text-white px-4 py-2 rounded font-mono"
              >
                🔄 Refresh
              </button>
            </div>
          </div>
        );
        break;
      case 'fragments':
        content = (
          <div>
            <h3 className="text-xl font-mono text-cyan-400 mb-4">Signal Fragments ({fragmentStats.total})</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
              <div className="bg-gray-700 rounded-lg p-3 text-center">
                <div className="text-xl font-mono font-bold text-green-400">{fragmentStats.active}</div>
                <div className="text-xs font-mono text-gray-400">Active</div>
              </div>
              <div className="bg-gray-700 rounded-lg p-3 text-center">
                <div className="text-xl font-mono font-bold text-blue-400">{fragmentStats.claimed}</div>
                <div className="text-xs font-mono text-gray-400">Claimed</div>
              </div>
              <div className="bg-gray-700 rounded-lg p-3 text-center">
                <div className="text-xl font-mono font-bold text-red-400">{fragmentStats.expired}</div>
                <div className="text-xs font-mono text-gray-400">Expired</div>
              </div>
              <div className="bg-gray-700 rounded-lg p-3 text-center">
                <div className="text-xl font-mono font-bold text-cyan-400">{fragmentStats.total}</div>
                <div className="text-xs font-mono text-gray-400">Total</div>
              </div>
            </div>
            <div className="flex space-x-2 mb-4">
              <button 
                onClick={dropFragment}
                className="bg-green-600 hover:bg-green-500 text-black px-4 py-2 rounded font-mono"
              >
                🎲 Drop Random Fragment
              </button>
              <button 
                onClick={clearExpiredFragments}
                className="bg-red-600 hover:bg-red-500 text-white px-4 py-2 rounded font-mono"
              >
                🗑️ Clear Expired
              </button>
              <button 
                onClick={() => {setActiveTab('fragments'); setShowInfoPanel(null);}}
                className="bg-cyan-600 hover:bg-cyan-500 text-white px-4 py-2 rounded font-mono"
              >
                📊 Manage Fragments
              </button>
            </div>
          </div>
        );
        break;
      default:
        content = <div>No information available</div>;
    }

    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        onClick={() => setShowInfoPanel(null)}
      >
        <motion.div
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.9, opacity: 0 }}
          className="bg-gray-800 rounded-lg p-6 max-w-2xl w-full max-h-96 overflow-y-auto border border-green-400"
          onClick={e => e.stopPropagation()}
        >
          <div className="flex justify-between items-center mb-4">
            <div></div>
            <button 
              onClick={() => setShowInfoPanel(null)}
              className="text-gray-400 hover:text-white text-xl font-mono"
            >
              ×
            </button>
          </div>
          {content}
        </motion.div>
      </motion.div>
    );
  };

  return (
    <div className="min-h-screen bg-black text-gray-200 p-6">
      <div className="max-w-7xl mx-auto">
        
        {/* Header */}
        <div className="mb-8 flex justify-between items-center">
          <div>
            <h1 className="text-4xl font-mono font-bold text-green-400 mb-2">
              ScrollSpace Admin
            </h1>
            <p className="text-gray-400 font-mono">
              {"> Theme park management console"}
            </p>
          </div>
          
          {/* Action Bar */}
          <div className="flex items-center space-x-4">
            <motion.button
              onClick={() => setShowHelp(!showHelp)}
              className="bg-gray-800 hover:bg-gray-700 text-green-400 px-3 py-2 rounded font-mono transition-colors"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              ?
            </motion.button>
            
            <motion.button
              onClick={saveData}
              disabled={saveStatus === 'saving'}
              className={`px-6 py-2 font-mono font-bold rounded transition-colors ${
                saveStatus === 'saving' 
                  ? 'bg-yellow-600 text-black' 
                  : saveStatus === 'saved'
                  ? 'bg-green-600 text-black'
                  : saveStatus === 'error'
                  ? 'bg-red-600 text-white'
                  : 'bg-green-600 hover:bg-green-500 text-black'
              }`}
              whileHover={{ scale: saveStatus === 'saving' ? 1 : 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              {saveStatus === 'saving' && '⏳ SAVING...'}
              {saveStatus === 'saved' && '✅ SAVED'}
              {saveStatus === 'error' && '❌ ERROR'}
              {saveStatus === 'idle' && '💾 SAVE ALL'}
            </motion.button>
          </div>
        </div>

        {/* Help Overlay */}
        <AnimatePresence>
          {showHelp && (
            <motion.div
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="bg-gray-900 border border-green-400 rounded-lg p-4 mb-6"
            >
              <h3 className="text-green-400 font-mono font-bold mb-2">Quick Help</h3>
              <div className="grid md:grid-cols-2 gap-4 text-sm font-mono">
                <div>
                  <p><span className="text-green-400">Dashboard:</span> Overview & analytics</p>
                  <p><span className="text-green-400">Zones:</span> Manage theme park areas</p>
                  <p><span className="text-green-400">Projects:</span> Add rides & attractions</p>
                </div>
                <div>
                  <p><span className="text-green-400">Settings:</span> Customize appearance</p>
                  <p><span className="text-green-400">Preview:</span> See live changes</p>
                  <p><span className="text-green-400">Drag & Drop:</span> Move projects between zones</p>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Navigation Tabs */}
        <div className="flex space-x-1 mb-8">
          {(['dashboard', 'zones', 'projects', 'database', 'settings', 'preview'] as const).map((tab) => (
            <motion.button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-6 py-3 font-mono font-medium rounded-t-lg transition-colors ${
                activeTab === tab
                  ? 'bg-gray-900 text-green-400 border-b-2 border-green-400'
                  : 'bg-gray-800 text-gray-400 hover:text-gray-200'
              }`}
              whileHover={{ y: activeTab === tab ? 0 : -2 }}
              whileTap={{ scale: 0.98 }}
            >
              {tab === 'dashboard' && '📊 '}
              {tab === 'zones' && '🎪 '}
              {tab === 'projects' && '🎠 '}
              {tab === 'database' && '🗄️ '}
              {tab === 'settings' && '⚙️ '}
              {tab === 'preview' && '👁️ '}
              {tab.toUpperCase()}
            </motion.button>
          ))}
        </div>

        {/* Content Area */}
        <div className="bg-gray-900 rounded-lg p-6 min-h-96">
          
          {/* Dashboard Tab */}
          {activeTab === 'dashboard' && (
            <div>
              <h2 className="text-2xl font-mono text-green-400 mb-6">ScrollSpace Overview</h2>
              
              {/* Stats Grid */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
                <motion.div 
                  className="bg-gray-800 rounded-lg p-4 border border-green-400/30 cursor-pointer"
                  whileHover={{ scale: 1.02 }}
                  onClick={() => setShowInfoPanel('zones')}
                >
                  <div className="text-3xl font-mono font-bold text-green-400">{zones.length}</div>
                  <div className="text-gray-400 font-mono text-sm">Active Zones</div>
                </motion.div>
                
                <motion.div 
                  className="bg-gray-800 rounded-lg p-4 border border-blue-400/30 cursor-pointer"
                  whileHover={{ scale: 1.02 }}
                  onClick={() => setShowInfoPanel('projects')}
                >
                  <div className="text-3xl font-mono font-bold text-blue-400">{projects.length}</div>
                  <div className="text-gray-400 font-mono text-sm">Total Projects</div>
                </motion.div>
                
                <motion.div 
                  className="bg-gray-800 rounded-lg p-4 border border-yellow-400/30 cursor-pointer"
                  whileHover={{ scale: 1.02 }}
                  onClick={() => setShowInfoPanel('live')}
                >
                  <div className="text-3xl font-mono font-bold text-yellow-400">
                    {projects.filter(p => p.status === 'live').length}
                  </div>
                  <div className="text-gray-400 font-mono text-sm">Live Projects</div>
                </motion.div>
                
                <motion.div 
                  className="bg-gray-800 rounded-lg p-4 border border-purple-400/30 cursor-pointer"
                  whileHover={{ scale: 1.02 }}
                  onClick={() => setShowInfoPanel('spirits')}
                >
                  <div className="text-3xl font-mono font-bold text-purple-400">{settings.spiritCount}</div>
                  <div className="text-gray-400 font-mono text-sm">Signal Spirits</div>
                </motion.div>

                <motion.div 
                  className="bg-gray-800 rounded-lg p-4 border border-cyan-400/30 cursor-pointer"
                  whileHover={{ scale: 1.02 }}
                  onClick={() => setShowInfoPanel('database')}
                >
                  <div className="text-3xl font-mono font-bold text-cyan-400">{dbStats.messages}</div>
                  <div className="text-gray-400 font-mono text-sm">Chat Messages</div>
                </motion.div>

                <motion.div 
                  className="bg-gray-800 rounded-lg p-4 border border-green-400/30 cursor-pointer"
                  whileHover={{ scale: 1.02 }}
                  onClick={() => setActiveTab('database')}
                >
                  <div className="text-3xl font-mono font-bold text-green-400">{dbStats.users}</div>
                  <div className="text-gray-400 font-mono text-sm">Total Users</div>
                </motion.div>
              </div>

              {/* Quick Actions */}
              <div className="grid md:grid-cols-2 gap-6">
                <div className="bg-gray-800 rounded-lg p-6">
                  <h3 className="text-lg font-mono text-green-400 mb-4">🚀 Quick Project Creator</h3>
                  <div className="space-y-3">
                    <div className="flex space-x-2">
                      <input
                        type="url"
                        value={quickGithubUrl}
                        onChange={(e) => setQuickGithubUrl(e.target.value)}
                        className="flex-1 bg-gray-700 text-white px-3 py-2 rounded font-mono text-sm"
                        placeholder="https://github.com/user/repo"
                        disabled={creatingProject}
                      />
                      <motion.button
                        onClick={() => createProjectFromGithub(quickGithubUrl)}
                        disabled={creatingProject || !quickGithubUrl}
                        className="bg-green-600 hover:bg-green-500 disabled:bg-gray-600 text-black font-mono font-bold px-4 py-2 rounded transition-colors"
                        whileHover={{ scale: creatingProject ? 1 : 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        {creatingProject ? '🔄' : '🤖'} {creatingProject ? 'Creating...' : 'AI Create'}
                      </motion.button>
                    </div>
                    <p className="text-xs text-gray-400 font-mono">
                      🎯 Paste any GitHub URL above and AI will auto-create the entire project page!
                    </p>
                  </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-6">
                  <h3 className="text-lg font-mono text-green-400 mb-4">Manual Actions</h3>
                  <div className="space-y-3">
                    <motion.button
                      onClick={addZone}
                      className="w-full bg-green-600 hover:bg-green-500 text-black font-mono font-bold py-2 rounded transition-colors"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      🎪 Create New Zone
                    </motion.button>
                    <motion.button
                      onClick={addProject}
                      className="w-full bg-blue-600 hover:bg-blue-500 text-white font-mono font-bold py-2 rounded transition-colors"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      🎠 Add New Project
                    </motion.button>
                    <motion.button
                      onClick={() => setActiveTab('settings')}
                      className="w-full bg-purple-600 hover:bg-purple-500 text-white font-mono font-bold py-2 rounded transition-colors"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      ⚙️ Customize Theme
                    </motion.button>
                  </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-6">
                  <h3 className="text-lg font-mono text-green-400 mb-4">Recent Activity</h3>
                  <div className="space-y-2 text-sm font-mono">
                    <div className="flex justify-between">
                      <span className="text-gray-400">TherapyGPT Updated</span>
                      <span className="text-green-400">Just now</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Laugh Loop Created</span>
                      <span className="text-green-400">Today</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Signal Spirits Optimized</span>
                      <span className="text-green-400">Yesterday</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Zones Tab */}
          {activeTab === 'zones' && (
            <div>
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-mono text-green-400">Theme Park Zones</h2>
                <motion.button
                  onClick={addZone}
                  className="bg-green-600 hover:bg-green-500 text-black font-mono font-bold px-4 py-2 rounded transition-colors"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  + ADD ZONE
                </motion.button>
              </div>
              
              <div className="grid gap-4">
                {zones.map((zone) => (
                  <motion.div
                    key={zone.id}
                    className="bg-gray-800 rounded-lg p-4 border border-gray-700"
                    whileHover={{ scale: 1.01 }}
                  >
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <input
                        type="text"
                        value={zone.emoji}
                        onChange={(e) => {
                          const updated = zones.map(z => 
                            z.id === zone.id ? { ...z, emoji: e.target.value } : z
                          );
                          setZones(updated);
                        }}
                        className="bg-gray-700 text-white px-3 py-2 rounded font-mono text-center text-2xl"
                        placeholder="🎮"
                      />
                      <input
                        type="text"
                        value={zone.title}
                        onChange={(e) => {
                          const updated = zones.map(z => 
                            z.id === zone.id ? { ...z, title: e.target.value } : z
                          );
                          setZones(updated);
                        }}
                        className="bg-gray-700 text-white px-3 py-2 rounded font-mono"
                        placeholder="Zone Title"
                      />
                      <input
                        type="text"
                        value={zone.tagline}
                        onChange={(e) => {
                          const updated = zones.map(z => 
                            z.id === zone.id ? { ...z, tagline: e.target.value } : z
                          );
                          setZones(updated);
                        }}
                        className="bg-gray-700 text-white px-3 py-2 rounded font-mono"
                        placeholder="Zone Tagline"
                      />
                      <button className="bg-red-600 hover:bg-red-500 text-white px-3 py-2 rounded font-mono transition-colors">
                        DELETE
                      </button>
                    </div>
                    <textarea
                      value={zone.description}
                      onChange={(e) => {
                        const updated = zones.map(z => 
                          z.id === zone.id ? { ...z, description: e.target.value } : z
                        );
                        setZones(updated);
                      }}
                      className="w-full bg-gray-700 text-white px-3 py-2 rounded font-mono mt-2"
                      rows={2}
                      placeholder="Zone Description"
                    />
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          {/* Projects Tab */}
          {activeTab === 'projects' && (
            <div>
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-mono text-green-400">Rides & Attractions</h2>
                <button
                  onClick={addProject}
                  className="bg-green-600 hover:bg-green-500 text-black font-mono font-bold px-4 py-2 rounded transition-colors"
                >
                  + ADD RIDE
                </button>
              </div>
              
              <div className="grid gap-4">
                {projects.map((project) => (
                  <motion.div
                    key={project.id}
                    className="bg-gray-800 rounded-lg p-4 border border-gray-700"
                    whileHover={{ scale: 1.01 }}
                  >
                    <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
                      <input
                        type="text"
                        value={project.title}
                        onChange={(e) => {
                          const updated = projects.map(p => 
                            p.id === project.id ? { ...p, title: e.target.value } : p
                          );
                          setProjects(updated);
                          setSaveStatus('idle');
                        }}
                        className="bg-gray-700 text-white px-3 py-2 rounded font-mono"
                        placeholder="Project Title"
                      />
                      <select 
                        value={project.type}
                        onChange={(e) => {
                          const updated = projects.map(p => 
                            p.id === project.id ? { ...p, type: e.target.value as Project['type'] } : p
                          );
                          setProjects(updated);
                          setSaveStatus('idle');
                        }}
                        className="bg-gray-700 text-white px-3 py-2 rounded font-mono"
                      >
                        <option value="comic-series">Comic Series</option>
                        <option value="app">Web App</option>
                        <option value="interactive">Interactive</option>
                        <option value="demo">Demo</option>
                      </select>
                      <select 
                        value={project.status}
                        onChange={(e) => {
                          const updated = projects.map(p => 
                            p.id === project.id ? { ...p, status: e.target.value as Project['status'] } : p
                          );
                          setProjects(updated);
                          setSaveStatus('idle');
                        }}
                        className="bg-gray-700 text-white px-3 py-2 rounded font-mono"
                      >
                        <option value="live">Live</option>
                        <option value="development">Development</option>
                        <option value="planned">Planned</option>
                      </select>
                      <select 
                        value={project.zone}
                        onChange={(e) => {
                          const updated = projects.map(p => 
                            p.id === project.id ? { ...p, zone: e.target.value } : p
                          );
                          setProjects(updated);
                          setSaveStatus('idle');
                        }}
                        className="bg-gray-700 text-white px-3 py-2 rounded font-mono"
                      >
                        {zones.map(zone => (
                          <option key={zone.id} value={zone.id}>{zone.title}</option>
                        ))}
                      </select>
                      <div className="flex space-x-2">
                        <button 
                          onClick={() => analyzeGithubRepo(project.id)}
                          disabled={analyzingRepo === project.id}
                          className="bg-blue-600 hover:bg-blue-500 text-white px-3 py-2 rounded font-mono transition-colors flex-1 text-sm"
                        >
                          {analyzingRepo === project.id ? '🔄' : '🔗'} GitHub
                        </button>
                      </div>
                      <button 
                        onClick={() => deleteProject(project.id)}
                        className="bg-red-600 hover:bg-red-500 text-white px-3 py-2 rounded font-mono transition-colors"
                      >
                        DELETE
                      </button>
                    </div>
                    
                    {/* GitHub URL Input */}
                    <div className="mt-3">
                      <input
                        type="url"
                        value={project.githubUrl || ''}
                        onChange={(e) => {
                          const updated = projects.map(p => 
                            p.id === project.id ? { ...p, githubUrl: e.target.value } : p
                          );
                          setProjects(updated);
                          setSaveStatus('idle');
                        }}
                        className="w-full bg-gray-700 text-white px-3 py-2 rounded font-mono text-sm"
                        placeholder="GitHub Repository URL (e.g., https://github.com/user/repo)"
                      />
                    </div>
                    
                    {/* Project Description */}
                    <div className="mt-3">
                      <textarea
                        value={project.description}
                        onChange={(e) => {
                          const updated = projects.map(p => 
                            p.id === project.id ? { ...p, description: e.target.value } : p
                          );
                          setProjects(updated);
                          setSaveStatus('idle');
                        }}
                        className={`w-full bg-gray-700 text-white px-3 py-2 rounded font-mono text-sm ${
                          project.autoGenerated ? 'border border-blue-400' : ''
                        }`}
                        rows={3}
                        placeholder="Project description..."
                      />
                      {project.autoGenerated && (
                        <div className="text-xs text-blue-400 font-mono mt-1">✨ AI-generated from GitHub</div>
                      )}
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          {/* Database Tab */}
          {activeTab === 'database' && (
            <div>
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-mono text-cyan-400">Database Management</h2>
                <div className="flex space-x-2">
                  <button
                    onClick={exportDatabaseData}
                    className="bg-green-600 hover:bg-green-500 text-black font-mono font-bold px-4 py-2 rounded transition-colors"
                  >
                    📥 EXPORT
                  </button>
                  <button
                    onClick={loadAllDatabaseData}
                    className="bg-blue-600 hover:bg-blue-500 text-white font-mono font-bold px-4 py-2 rounded transition-colors"
                  >
                    🔄 REFRESH
                  </button>
                </div>
              </div>

              {/* Database Stats */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                <div className="bg-gray-800 rounded-lg p-4 text-center border border-cyan-400/30">
                  <div className="text-2xl font-mono font-bold text-cyan-400">{dbStats.messages}</div>
                  <div className="text-sm font-mono text-gray-400">CHAT MESSAGES</div>
                </div>
                <div className="bg-gray-800 rounded-lg p-4 text-center border border-green-400/30">
                  <div className="text-2xl font-mono font-bold text-green-400">{dbStats.users}</div>
                  <div className="text-sm font-mono text-gray-400">TOTAL USERS</div>
                </div>
                <div className="bg-gray-800 rounded-lg p-4 text-center border border-purple-400/30">
                  <div className="text-2xl font-mono font-bold text-purple-400">{dbStats.fragments}</div>
                  <div className="text-sm font-mono text-gray-400">FRAGMENTS</div>
                </div>
                <div className="bg-gray-800 rounded-lg p-4 text-center border border-yellow-400/30">
                  <div className="text-2xl font-mono font-bold text-yellow-400">{dbStats.pickups}</div>
                  <div className="text-sm font-mono text-gray-400">PICKUPS</div>
                </div>
              </div>

              {/* Database Management Sections */}
              <div className="grid md:grid-cols-2 gap-6">
                
                {/* Chat Messages */}
                <div className="bg-gray-800 rounded-lg p-4">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-mono text-cyan-400">Chat Messages ({chatMessages.length})</h3>
                    <div className="flex space-x-2">
                      <button
                        onClick={dropFragment}
                        className="bg-green-600 hover:bg-green-500 text-black px-2 py-1 rounded font-mono text-xs"
                      >
                        🎲 Drop Fragment
                      </button>
                      <button
                        onClick={clearChatHistory}
                        className="bg-red-600 hover:bg-red-500 text-white px-2 py-1 rounded font-mono text-xs"
                      >
                        🗑️ Clear All
                      </button>
                    </div>
                  </div>
                  <div className="max-h-80 overflow-y-auto space-y-2">
                    {chatMessages.slice(0, 10).map((msg) => (
                      <div key={msg.id} className="bg-gray-700 rounded p-2 text-xs">
                        <div className="flex items-center justify-between mb-1">
                          <span className="font-mono text-cyan-400">{msg.username}</span>
                          <span className={`px-1 rounded font-mono ${
                            msg.type === 'system' ? 'text-purple-400' :
                            msg.type === 'join' ? 'text-green-400' :
                            msg.type === 'leave' ? 'text-red-400' : 'text-gray-400'
                          }`}>
                            {msg.type.toUpperCase()}
                          </span>
                        </div>
                        <div className="text-gray-300 font-mono">
                          {msg.message.length > 80 ? msg.message.substring(0, 80) + '...' : msg.message}
                        </div>
                        <div className="text-gray-500 font-mono text-xs mt-1">
                          {new Date(msg.created_at).toLocaleString()}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Signal Fragments */}
                <div className="bg-gray-800 rounded-lg p-4">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-mono text-purple-400">Signal Fragments ({fragments.length})</h3>
                    <div className="flex space-x-2">
                      <button
                        onClick={clearExpiredFragments}
                        className="bg-red-600 hover:bg-red-500 text-white px-2 py-1 rounded font-mono text-xs"
                      >
                        🗑️ Cleanup
                      </button>
                    </div>
                  </div>
                  <div className="max-h-80 overflow-y-auto space-y-2">
                    {fragments.slice(0, 10).map((fragment) => (
                      <div key={fragment.id} className={`bg-gray-700 rounded p-2 text-xs border-l-2 ${
                        fragment.available ? 'border-green-400' : 'border-blue-400'
                      }`}>
                        <div className="flex items-center justify-between mb-1">
                          <span className="font-mono text-cyan-400">#{fragment.fragment_id}</span>
                          <div className="flex space-x-1">
                            <span className={`px-1 rounded font-mono ${getRarityColor(fragment.rarity)} text-xs`}>
                              {fragment.rarity.charAt(0).toUpperCase()}
                            </span>
                            <span className={`px-1 rounded font-mono text-xs ${
                              fragment.available ? 'text-green-400' : 'text-blue-400'
                            }`}>
                              {fragment.available ? 'ACTIVE' : 'CLAIMED'}
                            </span>
                          </div>
                        </div>
                        <div className="text-gray-300 font-mono">
                          {fragment.content.length > 60 ? fragment.content.substring(0, 60) + '...' : fragment.content}
                        </div>
                        {fragment.claimed_by && (
                          <div className="text-gray-500 font-mono text-xs mt-1">
                            Claimed by: {fragment.claimed_by}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {/* Chat Users */}
                <div className="bg-gray-800 rounded-lg p-4">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-mono text-green-400">Chat Users ({chatUsers.length})</h3>
                    <button
                      onClick={clearAllUsers}
                      className="bg-red-600 hover:bg-red-500 text-white px-2 py-1 rounded font-mono text-xs"
                    >
                      🗑️ Clear All
                    </button>
                  </div>
                  <div className="max-h-80 overflow-y-auto space-y-2">
                    {chatUsers.map((user) => (
                      <div key={user.id} className="bg-gray-700 rounded p-2 text-xs">
                        <div className="flex items-center justify-between mb-1">
                          <span className="font-mono text-green-400">{user.username}</span>
                          <span className={`px-1 rounded font-mono ${
                            user.status === 'online' ? 'text-green-400' :
                            user.status === 'away' ? 'text-yellow-400' : 'text-gray-400'
                          }`}>
                            {user.status.toUpperCase()}
                          </span>
                        </div>
                        <div className="text-gray-500 font-mono text-xs">
                          Last seen: {new Date(user.last_seen).toLocaleString()}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Database Actions */}
                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="text-lg font-mono text-yellow-400 mb-4">Database Actions</h3>
                  <div className="space-y-3">
                    <button
                      onClick={exportDatabaseData}
                      className="w-full bg-green-600 hover:bg-green-500 text-black py-2 px-4 rounded font-mono transition-colors"
                    >
                      📥 Export All Data (JSON)
                    </button>
                    <button
                      onClick={loadAllDatabaseData}
                      className="w-full bg-blue-600 hover:bg-blue-500 text-white py-2 px-4 rounded font-mono transition-colors"
                    >
                      🔄 Refresh All Data
                    </button>
                    <div className="border-t border-gray-600 pt-3">
                      <p className="text-gray-400 font-mono text-xs mb-2">Danger Zone:</p>
                      <button
                        onClick={clearChatHistory}
                        className="w-full bg-red-600 hover:bg-red-500 text-white py-2 px-4 rounded font-mono transition-colors mb-2"
                      >
                        🗑️ Clear Chat History
                      </button>
                      <button
                        onClick={clearAllUsers}
                        className="w-full bg-red-600 hover:bg-red-500 text-white py-2 px-4 rounded font-mono transition-colors"
                      >
                        👥 Disconnect All Users
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Settings Tab */}
          {activeTab === 'settings' && (
            <div>
              <h2 className="text-2xl font-mono text-green-400 mb-6">Theme Park Settings</h2>
              
              <div className="grid gap-6">
                {/* Typography Settings */}
                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="text-lg font-mono text-green-400 mb-4">Typography</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-mono text-gray-400 mb-2">Title Font</label>
                      <select className="w-full bg-gray-700 text-white px-3 py-2 rounded font-mono">
                        <option>Space Mono</option>
                        <option>Courier New</option>
                        <option>JetBrains Mono</option>
                        <option>Fira Code</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-mono text-gray-400 mb-2">Body Font</label>
                      <select className="w-full bg-gray-700 text-white px-3 py-2 rounded font-mono">
                        <option>Space Mono</option>
                        <option>Inter</option>
                        <option>System Default</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* AI Integration Settings */}
                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="text-lg font-mono text-green-400 mb-4">🤖 AI Integration</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-mono text-gray-400 mb-2">OpenAI API Key</label>
                      <input 
                        type="password"
                        value={openaiApiKey}
                        onChange={(e) => {
                          setOpenaiApiKey(e.target.value);
                          localStorage.setItem('scrollspace-openai-key', e.target.value);
                        }}
                        className="w-full bg-gray-700 text-white px-3 py-2 rounded font-mono"
                        placeholder="sk-..."
                      />
                      <p className="text-xs text-gray-400 font-mono mt-1">
                        Required for GitHub repository analysis. Get your key from 
                        <a href="https://platform.openai.com/api-keys" target="_blank" className="text-green-400 hover:underline">OpenAI Platform</a>
                      </p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className={`w-3 h-3 rounded-full ${
                        openaiApiKey ? 'bg-green-400' : 'bg-red-400'
                      }`}></div>
                      <span className="text-sm font-mono text-gray-400">
                        {openaiApiKey ? 'API Key Configured' : 'API Key Required'}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Theme Settings */}
                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="text-lg font-mono text-green-400 mb-4">Theme</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-mono text-gray-400 mb-2">Primary Color</label>
                      <input type="color" value="#22c55e" className="w-full h-10 rounded" />
                    </div>
                    <div>
                      <label className="block text-sm font-mono text-gray-400 mb-2">Background</label>
                      <input type="color" value="#000000" className="w-full h-10 rounded" />
                    </div>
                    <div>
                      <label className="block text-sm font-mono text-gray-400 mb-2">Text Color</label>
                      <input type="color" value="#e5e7eb" className="w-full h-10 rounded" />
                    </div>
                  </div>
                </div>

                {/* Save Button */}
                <button className="bg-green-600 hover:bg-green-500 text-black font-mono font-bold px-6 py-3 rounded transition-colors">
                  SAVE SETTINGS
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Information Panels */}
      <AnimatePresence>
        {renderInfoPanel()}
      </AnimatePresence>
    </div>
  );
};

export default AdminPanel;