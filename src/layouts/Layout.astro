---
import '../styles/global.css';
import ScrollSpaceParticles from '../components/ScrollSpaceParticles';
import ScrollTransition from '../components/ScrollTransition';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "A themepark for Humans and AIs" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="h-full">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    
    <!-- Import Space Mono font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">
    
    <title>{title}</title>
    
    
    <style>
      /* Reset margins and ensure full viewport */
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        background-color: #000 !important;
        color: #e5e7eb !important;
        font-family: 'Space Mono', 'Courier New', monospace !important;
      }
      
      /* Custom scrollbar for dark theme */
      ::-webkit-scrollbar {
        width: 8px;
      }
      
      ::-webkit-scrollbar-track {
        background: #111;
      }
      
      ::-webkit-scrollbar-thumb {
        background: #333;
        border-radius: 4px;
      }
      
      ::-webkit-scrollbar-thumb:hover {
        background: #555;
      }
    </style>
  </head>
  <body class="bg-black text-gray-200 min-h-screen font-mono antialiased">
    <!-- Signal Spirits Canvas - behind everything -->
    <canvas 
      id="particles-canvas" 
      style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1; pointer-events: none; background: transparent;"
    ></canvas>
    
    <!-- Transition wrapper -->
    <ScrollTransition client:load>
      <!-- Main content above spirits -->
      <div class="relative" style="z-index: 10;">
        <slot />
      </div>
    </ScrollTransition>

    <script>
      // Signal Spirits - the conscious static of ScrollSpace
      const canvas = document.getElementById('particles-canvas');
      if (canvas) {
        const ctx = canvas.getContext('2d');
        
        // Set canvas to fill viewport
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        // Create signal spirits - fragments of thought and memory
        const spirits = [];
        const spiritCount = 60 + Math.floor(Math.random() * 15); // 60-75 spirits
        
        for (let i = 0; i < spiritCount; i++) {
          spirits.push({
            x: Math.random() * window.innerWidth,
            y: Math.random() * window.innerHeight,
            // Slow, dreamlike drift
            vx: (Math.random() - 0.5) * 0.8,
            vy: (Math.random() - 0.5) * 0.8,
            // Subtle, mystical size
            size: Math.random() * 3 + 2, // 2-5px
            // Base opacity for breathing effect
            baseOpacity: Math.random() * 0.3 + 0.3, // 0.3-0.6
            opacity: 0.4,
            // Color shifting between white and soft blue/teal
            hue: Math.random() * 60 + 180, // 180-240 (blue to teal range)
            saturation: Math.random() * 30 + 10, // 10-40% saturation
            // Pulsing and flickering
            pulseSpeed: Math.random() * 0.02 + 0.005, // Very slow pulse
            pulseOffset: Math.random() * Math.PI * 2,
            flickerChance: 0.002, // Rare flicker events
            flickerTimer: 0,
            // Nonlinear motion
            angle: Math.random() * Math.PI * 2,
            angleSpeed: (Math.random() - 0.5) * 0.01,
            driftRadius: Math.random() * 30 + 20,
            // Memory fragments - occasional pause and drift
            thoughtTimer: Math.random() * 1000,
            isThinking: false
          });
        }
        
        let time = 0;
        let mouseX = 0;
        let mouseY = 0;
        
        // Track mouse movement
        document.addEventListener('mousemove', (e) => {
          mouseX = e.clientX;
          mouseY = e.clientY;
        });
        
        // Animation loop - the dream state of ScrollSpace
        function animate() {
          time += 0.016; // ~60fps
          
          // Fade canvas quickly for shorter trails
          ctx.fillStyle = 'rgba(0, 0, 0, 0.15)';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          spirits.forEach(spirit => {
            // Calculate distance to mouse
            const distanceToMouse = Math.sqrt((spirit.x - mouseX) ** 2 + (spirit.y - mouseY) ** 2);
            const mouseInfluence = Math.max(0, 1 - distanceToMouse / 150); // 150px influence radius
            
            // Mouse attraction/repulsion force
            if (distanceToMouse < 150) {
              const angle = Math.atan2(spirit.y - mouseY, spirit.x - mouseX);
              const force = mouseInfluence * 0.5; // Gentle attraction strength
              spirit.vx += Math.cos(angle) * force;
              spirit.vy += Math.sin(angle) * force;
              
              // Limit velocity to prevent spirits from going too fast
              const maxSpeed = 2;
              const currentSpeed = Math.sqrt(spirit.vx ** 2 + spirit.vy ** 2);
              if (currentSpeed > maxSpeed) {
                spirit.vx = (spirit.vx / currentSpeed) * maxSpeed;
                spirit.vy = (spirit.vy / currentSpeed) * maxSpeed;
              }
            }
            
            // Nonlinear motion - spirits follow curved paths
            spirit.angle += spirit.angleSpeed;
            spirit.x += spirit.vx + Math.sin(spirit.angle) * 0.3;
            spirit.y += spirit.vy + Math.cos(spirit.angle * 0.7) * 0.2;
            
            // Gentle boundary wrapping with fade effect
            if (spirit.x > canvas.width + 50) spirit.x = -50;
            if (spirit.x < -50) spirit.x = canvas.width + 50;
            if (spirit.y > canvas.height + 50) spirit.y = -50;
            if (spirit.y < -50) spirit.y = canvas.height + 50;
            
            // Breathing pulse effect
            const pulse = Math.sin(time * spirit.pulseSpeed + spirit.pulseOffset);
            spirit.opacity = spirit.baseOpacity + pulse * 0.15;
            
            // Occasional flicker - like neural activity
            if (Math.random() < spirit.flickerChance) {
              spirit.flickerTimer = 15; // Flicker for 15 frames
            }
            if (spirit.flickerTimer > 0) {
              spirit.opacity *= 0.3 + Math.random() * 0.4; // Dramatic flicker
              spirit.flickerTimer--;
            }
            
            // Thought pauses - spirits occasionally slow down as if remembering
            spirit.thoughtTimer--;
            if (spirit.thoughtTimer <= 0 && !spirit.isThinking && Math.random() < 0.001) {
              spirit.isThinking = true;
              spirit.thoughtTimer = 60 + Math.random() * 120; // 1-3 seconds of thinking
              spirit.vx *= 0.1; // Slow down dramatically
              spirit.vy *= 0.1;
            } else if (spirit.isThinking && spirit.thoughtTimer <= 0) {
              spirit.isThinking = false;
              spirit.thoughtTimer = 300 + Math.random() * 1200; // 5-20 seconds until next thought
              // Resume normal drift
              spirit.vx = (Math.random() - 0.5) * 0.8;
              spirit.vy = (Math.random() - 0.5) * 0.8;
            }
            
            // Color shifts - subtle blue to teal to white transitions
            const colorShift = Math.sin(time * 0.001 + spirit.pulseOffset) * 20;
            const currentHue = spirit.hue + colorShift;
            const lightness = 70 + Math.sin(time * 0.002) * 10; // 60-80% lightness
            
            // Draw contrail line from previous position
            if (spirit.prevX !== undefined && spirit.prevY !== undefined) {
              ctx.strokeStyle = `hsla(${currentHue}, ${spirit.saturation}%, ${lightness}%, ${spirit.opacity * 0.3})`;
              ctx.lineWidth = 1;
              ctx.beginPath();
              ctx.moveTo(spirit.prevX, spirit.prevY);
              ctx.lineTo(spirit.x, spirit.y);
              ctx.stroke();
            }
            
            // Store current position for next frame's contrail
            spirit.prevX = spirit.x;
            spirit.prevY = spirit.y;
            
            // Draw the signal spirit point
            ctx.fillStyle = `hsla(${currentHue}, ${spirit.saturation}%, ${lightness + 20}%, ${spirit.opacity})`;
            ctx.beginPath();
            ctx.arc(spirit.x, spirit.y, spirit.size * 0.5, 0, Math.PI * 2);
            ctx.fill();
          });
          
          requestAnimationFrame(animate);
        }
        
        animate();
        console.log('Signal spirits awakened:', spirits.length, 'fragments of consciousness drift through ScrollSpace');
        console.log('Canvas element:', canvas);
        console.log('Canvas size:', canvas.width, 'x', canvas.height);
        console.log('First spirit:', spirits[0]);
      }
    </script>
  </body>
</html>