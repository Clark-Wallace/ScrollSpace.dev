---
import Layout from '../layouts/Layout.astro';
---

<Layout title="ScrollSpace Setup" description="Database setup for Signal Fragments">
  <div class="min-h-screen bg-black text-white p-6 flex items-center justify-center">
    <div class="max-w-4xl mx-auto">
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-green-400 mb-4 font-mono">
          SCROLLSPACE_DATABASE_SETUP
        </h1>
        <p class="text-gray-300 font-mono">
          Initialize authentication and Signal Fragments system in your Supabase project
        </p>
      </div>

      <div class="bg-black/80 border border-green-400 p-6 font-mono">
        <h2 class="text-xl text-green-400 mb-4">Setup Instructions:</h2>
        
        <div class="space-y-4 text-sm">
          <div class="border-l-2 border-green-400 pl-4">
            <p class="text-green-300 font-bold">1. Open your Supabase Dashboard</p>
            <p class="text-gray-300">Go to https://supabase.com/dashboard</p>
          </div>
          
          <div class="border-l-2 border-green-400 pl-4">
            <p class="text-green-300 font-bold">2. Navigate to SQL Editor</p>
            <p class="text-gray-300">Click "SQL Editor" in the left sidebar</p>
          </div>
          
          <div class="border-l-2 border-green-400 pl-4">
            <p class="text-green-300 font-bold">3. Copy and Run This SQL:</p>
            <div class="bg-black border border-gray-600 p-4 mt-2 overflow-x-auto">
              <pre class="text-xs text-gray-300"><code>-- Create user_profiles table
CREATE TABLE IF NOT EXISTS user_profiles (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE NOT NULL,
  username TEXT UNIQUE NOT NULL,
  display_name TEXT,
  avatar_url TEXT,
  bio TEXT,
  total_fragments INTEGER DEFAULT 0,
  rare_fragments INTEGER DEFAULT 0,
  joined_at TIMESTAMPTZ DEFAULT NOW(),
  last_seen TIMESTAMPTZ DEFAULT NOW(),
  is_online BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create chat_messages table (if it doesn't exist)
CREATE TABLE IF NOT EXISTS chat_messages (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  username TEXT NOT NULL,
  message TEXT NOT NULL,
  type TEXT DEFAULT 'message' CHECK (type IN ('message', 'join', 'leave', 'system')),
  timestamp TIMESTAMPTZ NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Add user_id column to existing tables if it doesn't exist
ALTER TABLE chat_messages ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL;

-- Create chat_users table (if it doesn't exist)
CREATE TABLE IF NOT EXISTS chat_users (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  status TEXT DEFAULT 'online' CHECK (status IN ('online', 'away', 'busy')),
  last_seen TIMESTAMPTZ DEFAULT NOW(),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Add user_id column to existing tables if it doesn't exist
ALTER TABLE chat_users ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL;

-- Create signal_fragments table (if it doesn't exist)
CREATE TABLE IF NOT EXISTS signal_fragments (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  fragment_id TEXT UNIQUE NOT NULL,
  content TEXT NOT NULL,
  content_type TEXT DEFAULT 'lore' CHECK (content_type IN ('lore', 'puzzle', 'flavor', 'personalized')),
  rarity TEXT DEFAULT 'common' CHECK (rarity IN ('common', 'rare', 'encrypted', 'corrupted')),
  available BOOLEAN DEFAULT true,
  claimed_by TEXT,
  claimed_at TIMESTAMPTZ,
  expires_at TIMESTAMPTZ NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Add user_id column to existing tables if it doesn't exist
ALTER TABLE signal_fragments ADD COLUMN IF NOT EXISTS claimed_by_user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL;

-- Create fragment_pickups table for logging (if it doesn't exist)
CREATE TABLE IF NOT EXISTS fragment_pickups (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  fragment_id TEXT NOT NULL,
  username TEXT NOT NULL,
  content TEXT NOT NULL,
  rarity TEXT NOT NULL,
  picked_up_at TIMESTAMPTZ DEFAULT NOW()
);

-- Add user_id column to existing tables if it doesn't exist
ALTER TABLE fragment_pickups ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL;

-- Enable Row Level Security (only if not already enabled)
DO $$
BEGIN
  -- Enable RLS for user_profiles if not already enabled
  IF NOT EXISTS (
    SELECT 1 FROM pg_tables 
    WHERE tablename = 'user_profiles' 
    AND rowsecurity = true
  ) THEN
    ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
  END IF;
  
  -- Enable RLS for chat_messages if not already enabled
  IF NOT EXISTS (
    SELECT 1 FROM pg_tables 
    WHERE tablename = 'chat_messages' 
    AND rowsecurity = true
  ) THEN
    ALTER TABLE chat_messages ENABLE ROW LEVEL SECURITY;
  END IF;
  
  -- Enable RLS for chat_users if not already enabled
  IF NOT EXISTS (
    SELECT 1 FROM pg_tables 
    WHERE tablename = 'chat_users' 
    AND rowsecurity = true
  ) THEN
    ALTER TABLE chat_users ENABLE ROW LEVEL SECURITY;
  END IF;
  
  -- Enable RLS for signal_fragments if not already enabled
  IF NOT EXISTS (
    SELECT 1 FROM pg_tables 
    WHERE tablename = 'signal_fragments' 
    AND rowsecurity = true
  ) THEN
    ALTER TABLE signal_fragments ENABLE ROW LEVEL SECURITY;
  END IF;
  
  -- Enable RLS for fragment_pickups if not already enabled
  IF NOT EXISTS (
    SELECT 1 FROM pg_tables 
    WHERE tablename = 'fragment_pickups' 
    AND rowsecurity = true
  ) THEN
    ALTER TABLE fragment_pickups ENABLE ROW LEVEL SECURITY;
  END IF;
END $$;

-- Drop existing policies if they exist to avoid conflicts
DROP POLICY IF EXISTS "Users can view all profiles" ON user_profiles;
DROP POLICY IF EXISTS "Users can insert their own profile" ON user_profiles;
DROP POLICY IF EXISTS "Users can update their own profile" ON user_profiles;
DROP POLICY IF EXISTS "Anyone can read messages" ON chat_messages;
DROP POLICY IF EXISTS "Anyone can insert messages" ON chat_messages;
DROP POLICY IF EXISTS "Anyone can read users" ON chat_users;
DROP POLICY IF EXISTS "Anyone can insert users" ON chat_users;
DROP POLICY IF EXISTS "Anyone can update users" ON chat_users;
DROP POLICY IF EXISTS "Anyone can delete users" ON chat_users;
DROP POLICY IF EXISTS "Anyone can read fragments" ON signal_fragments;
DROP POLICY IF EXISTS "Anyone can insert fragments" ON signal_fragments;
DROP POLICY IF EXISTS "Anyone can update fragments" ON signal_fragments;
DROP POLICY IF EXISTS "Anyone can delete fragments" ON signal_fragments;
DROP POLICY IF EXISTS "Anyone can read pickups" ON fragment_pickups;
DROP POLICY IF EXISTS "Anyone can insert pickups" ON fragment_pickups;

-- User profile policies
CREATE POLICY "Users can view all profiles" ON user_profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile" ON user_profiles FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own profile" ON user_profiles FOR UPDATE USING (auth.uid() = user_id);

-- Chat message policies (public access for now)
CREATE POLICY "Anyone can read messages" ON chat_messages FOR SELECT USING (true);
CREATE POLICY "Anyone can insert messages" ON chat_messages FOR INSERT WITH CHECK (true);

-- Chat user policies  
CREATE POLICY "Anyone can read users" ON chat_users FOR SELECT USING (true);
CREATE POLICY "Anyone can insert users" ON chat_users FOR INSERT WITH CHECK (true);
CREATE POLICY "Anyone can update users" ON chat_users FOR UPDATE USING (true);
CREATE POLICY "Anyone can delete users" ON chat_users FOR DELETE USING (true);

-- Signal fragment policies
CREATE POLICY "Anyone can read fragments" ON signal_fragments FOR SELECT USING (true);
CREATE POLICY "Anyone can insert fragments" ON signal_fragments FOR INSERT WITH CHECK (true);
CREATE POLICY "Anyone can update fragments" ON signal_fragments FOR UPDATE USING (true);
CREATE POLICY "Anyone can delete fragments" ON signal_fragments FOR DELETE USING (true);

-- Fragment pickup policies
CREATE POLICY "Anyone can read pickups" ON fragment_pickups FOR SELECT USING (true);
CREATE POLICY "Anyone can insert pickups" ON fragment_pickups FOR INSERT WITH CHECK (true);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_user_profiles_user_id ON user_profiles(user_id);
CREATE INDEX IF NOT EXISTS idx_user_profiles_username ON user_profiles(username);
CREATE INDEX IF NOT EXISTS idx_user_profiles_is_online ON user_profiles(is_online);
CREATE INDEX IF NOT EXISTS idx_chat_messages_created_at ON chat_messages(created_at);
CREATE INDEX IF NOT EXISTS idx_chat_messages_user_id ON chat_messages(user_id);
CREATE INDEX IF NOT EXISTS idx_chat_users_username ON chat_users(username);
CREATE INDEX IF NOT EXISTS idx_chat_users_status ON chat_users(status);
CREATE INDEX IF NOT EXISTS idx_chat_users_user_id ON chat_users(user_id);
CREATE INDEX IF NOT EXISTS idx_signal_fragments_fragment_id ON signal_fragments(fragment_id);
CREATE INDEX IF NOT EXISTS idx_signal_fragments_available ON signal_fragments(available);
CREATE INDEX IF NOT EXISTS idx_signal_fragments_expires_at ON signal_fragments(expires_at);
CREATE INDEX IF NOT EXISTS idx_signal_fragments_claimed_by_user_id ON signal_fragments(claimed_by_user_id);
CREATE INDEX IF NOT EXISTS idx_fragment_pickups_username ON fragment_pickups(username);
CREATE INDEX IF NOT EXISTS idx_fragment_pickups_user_id ON fragment_pickups(user_id);

-- Enable realtime for tables (only if not already added)
DO $$
BEGIN
  -- Add user_profiles to realtime if not already added
  IF NOT EXISTS (
    SELECT 1 FROM pg_publication_tables 
    WHERE pubname = 'supabase_realtime' 
    AND tablename = 'user_profiles'
  ) THEN
    ALTER PUBLICATION supabase_realtime ADD TABLE user_profiles;
  END IF;
  
  -- Add chat_messages to realtime if not already added
  IF NOT EXISTS (
    SELECT 1 FROM pg_publication_tables 
    WHERE pubname = 'supabase_realtime' 
    AND tablename = 'chat_messages'
  ) THEN
    ALTER PUBLICATION supabase_realtime ADD TABLE chat_messages;
  END IF;
  
  -- Add chat_users to realtime if not already added
  IF NOT EXISTS (
    SELECT 1 FROM pg_publication_tables 
    WHERE pubname = 'supabase_realtime' 
    AND tablename = 'chat_users'
  ) THEN
    ALTER PUBLICATION supabase_realtime ADD TABLE chat_users;
  END IF;
  
  -- Add signal_fragments to realtime if not already added
  IF NOT EXISTS (
    SELECT 1 FROM pg_publication_tables 
    WHERE pubname = 'supabase_realtime' 
    AND tablename = 'signal_fragments'
  ) THEN
    ALTER PUBLICATION supabase_realtime ADD TABLE signal_fragments;
  END IF;
  
  -- Add fragment_pickups to realtime if not already added
  IF NOT EXISTS (
    SELECT 1 FROM pg_publication_tables 
    WHERE pubname = 'supabase_realtime' 
    AND tablename = 'fragment_pickups'
  ) THEN
    ALTER PUBLICATION supabase_realtime ADD TABLE fragment_pickups;
  END IF;
END $$;</code></pre>
            </div>
            <button 
              onclick="copyToClipboard()" 
              class="mt-2 bg-green-900 hover:bg-green-800 border border-green-400 text-green-400 px-4 py-2 text-xs transition-all"
            >
              📋 COPY_SQL
            </button>
          </div>

          <div class="border-l-2 border-green-400 pl-4">
            <p class="text-green-300 font-bold">4. Enable Authentication Providers</p>
            <p class="text-gray-300">Go to Authentication → Providers</p>
            <p class="text-gray-300">Enable: Email, GitHub, Google (optional)</p>
          </div>

          <div class="border-l-2 border-green-400 pl-4">
            <p class="text-green-300 font-bold">5. Enable Realtime</p>
            <p class="text-gray-300">Go to Database → Replication</p>
            <p class="text-gray-300">Enable realtime for: user_profiles, chat_messages, chat_users, signal_fragments, fragment_pickups</p>
          </div>

          <div class="border-l-2 border-green-400 pl-4">
            <p class="text-green-300 font-bold">6. Test Connection</p>
            <button 
              onclick="testConnection()" 
              class="bg-blue-900 hover:bg-blue-800 border border-blue-400 text-blue-400 px-4 py-2 text-xs transition-all"
            >
              🔍 TEST_FRAGMENTS_SYSTEM
            </button>
            <div id="test-result" class="mt-2 text-xs"></div>
          </div>
        </div>

        <div class="mt-6 pt-4 border-t border-green-400">
          <p class="text-green-400 text-sm">
            ✅ Once setup is complete, users can create accounts and Signal Fragments will automatically appear in authenticated chat!
          </p>
          <a 
            href="/chat" 
            class="inline-block mt-2 bg-green-900 hover:bg-green-800 border border-green-400 text-green-400 px-6 py-2 text-sm transition-all"
          >
            🚀 RETURN_TO_CHAT
          </a>
        </div>
      </div>
    </div>
  </div>

  <script>
    function copyToClipboard() {
      const sqlCode = document.querySelector('pre code').textContent;
      navigator.clipboard.writeText(sqlCode).then(() => {
        const btn = document.querySelector('button');
        const originalText = btn.textContent;
        btn.textContent = '✅ COPIED!';
        btn.style.backgroundColor = '#166534';
        setTimeout(() => {
          btn.textContent = originalText;
          btn.style.backgroundColor = '';
        }, 2000);
      });
    }

    async function testConnection() {
      const resultDiv = document.getElementById('test-result');
      resultDiv.textContent = '⏳ Testing connection...';
      resultDiv.className = 'mt-2 text-xs text-yellow-400';

      try {
        const response = await fetch('/api/test-fragments');
        if (response.ok) {
          resultDiv.textContent = '✅ Signal Fragments system online!';
          resultDiv.className = 'mt-2 text-xs text-green-400';
        } else {
          resultDiv.textContent = '❌ Tables not found. Please run the SQL above.';
          resultDiv.className = 'mt-2 text-xs text-red-400';
        }
      } catch (error) {
        resultDiv.textContent = '❌ Connection failed. Check your environment variables.';
        resultDiv.className = 'mt-2 text-xs text-red-400';
      }
    }
  </script>
</Layout>