---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Authentication - ScrollSpace" description="Completing authentication...">
  <div class="min-h-screen flex items-center justify-center">
    <div class="text-center space-y-6 max-w-md mx-auto px-4">
      
      {/* Terminal Loading */}
      <div class="bg-black/80 backdrop-blur-sm border border-green-400 shadow-lg p-6" 
           style="box-shadow: 0 0 20px rgba(0, 255, 65, 0.5), inset 1px 1px 0px rgba(0, 255, 65, 0.2), inset -1px -1px 0px rgba(0, 0, 0, 0.8); font-family: Courier New, monospace;">
        
        {/* Terminal Header */}
        <div class="bg-black border-b border-green-400 p-2 mb-4 relative overflow-hidden">
          <div class="absolute inset-0 bg-gradient-to-r from-transparent via-green-400/10 to-transparent animate-pulse"></div>
          <div class="flex items-center space-x-2 relative z-10">
            <div class="flex space-x-1">
              <div class="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
              <div class="w-2 h-2 bg-yellow-500 rounded-full"></div>
              <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            </div>
            <span class="text-xs font-mono text-green-400 tracking-wider">
              [AUTH_CALLBACK] NEURAL_LINK_PROCESSING
            </span>
          </div>
        </div>

        {/* Loading Animation */}
        <div class="space-y-4">
          <div class="text-green-400 text-sm font-mono animate-pulse">
            >> ESTABLISHING_SECURE_CONNECTION...
          </div>
          
          <div class="flex justify-center">
            <div class="w-8 h-8 border border-green-400 rounded-full animate-spin border-t-transparent"></div>
          </div>
          
          <div class="text-green-400 text-xs font-mono opacity-60">
            Processing authentication matrix...
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Handle OAuth callback
  async function handleAuthCallback() {
    try {
      const { createClient } = await import('@supabase/supabase-js');
      
      const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
      const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
      
      if (!supabaseUrl || !supabaseAnonKey) {
        throw new Error('Supabase configuration missing');
      }
      
      const supabase = createClient(supabaseUrl, supabaseAnonKey);
      
      // Get the session from the URL hash
      const { data, error } = await supabase.auth.getSession();
      
      if (error) {
        console.error('Auth callback error:', error);
        window.location.href = '/?auth=error';
        return;
      }
      
      if (data.session) {
        // Successfully authenticated, redirect to main page
        window.location.href = '/chat';
      } else {
        // No session, redirect to home
        window.location.href = '/?auth=cancelled';
      }
    } catch (error) {
      console.error('Callback handling failed:', error);
      window.location.href = '/?auth=error';
    }
  }

  // Run callback handler when page loads
  handleAuthCallback();
</script>

<style>
  /* Scanlines effect */
  body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
      0deg,
      transparent,
      transparent 2px,
      rgba(0, 255, 65, 0.02) 2px,
      rgba(0, 255, 65, 0.02) 4px
    );
    pointer-events: none;
    z-index: 1;
  }
</style>