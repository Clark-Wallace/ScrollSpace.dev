---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Auth Debug - ScrollSpace" description="Debug authentication system">
  <div class="min-h-screen bg-black text-green-400 p-6">
    <div class="max-w-2xl mx-auto">
      <h1 class="text-3xl font-mono font-bold mb-6">üîç AUTH_DEBUG_TERMINAL</h1>
      
      <div class="bg-black border border-green-400 p-4 font-mono text-sm">
        <div id="debug-output" class="space-y-2">
          <div>Starting authentication system diagnostics...</div>
        </div>
        
        <div class="mt-6 space-y-4">
          <button 
            onclick="testSupabaseConnection()" 
            class="bg-green-900 hover:bg-green-800 border border-green-400 text-green-400 px-4 py-2 text-sm transition-all"
          >
            TEST_SUPABASE_CONNECTION
          </button>
          
          <button 
            onclick="testAuthProviders()" 
            class="bg-blue-900 hover:bg-blue-800 border border-blue-400 text-blue-400 px-4 py-2 text-sm transition-all"
          >
            TEST_AUTH_PROVIDERS
          </button>
          
          <button 
            onclick="testRegister()" 
            class="bg-purple-900 hover:bg-purple-800 border border-purple-400 text-purple-400 px-4 py-2 text-sm transition-all"
          >
            TEST_REGISTRATION
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  let output;
  
  function log(message, type = 'info') {
    if (!output) output = document.getElementById('debug-output');
    const div = document.createElement('div');
    const timestamp = new Date().toLocaleTimeString();
    div.innerHTML = `[${timestamp}] ${message}`;
    
    if (type === 'error') div.className = 'text-red-400';
    else if (type === 'success') div.className = 'text-green-400';
    else if (type === 'warning') div.className = 'text-yellow-400';
    
    output.appendChild(div);
    output.scrollTop = output.scrollHeight;
  }

  async function testSupabaseConnection() {
    log('Testing Supabase connection...');
    
    try {
      const { createClient } = await import('@supabase/supabase-js');
      const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
      const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
      
      log(`Supabase URL: ${supabaseUrl}`);
      log(`Anon Key: ${supabaseAnonKey ? supabaseAnonKey.substring(0, 20) + '...' : 'MISSING'}`);
      
      if (!supabaseUrl || !supabaseAnonKey) {
        log('‚ùå Environment variables missing!', 'error');
        return;
      }
      
      const supabase = createClient(supabaseUrl, supabaseAnonKey);
      
      // Test basic connection
      const { data, error } = await supabase.from('user_profiles').select('count', { count: 'exact', head: true });
      
      if (error) {
        log(`‚ùå Database connection failed: ${error.message}`, 'error');
        log('üí° Make sure you ran the SQL setup from /setup page', 'warning');
      } else {
        log('‚úÖ Supabase connection successful!', 'success');
        log(`Found ${data?.length || 0} user profiles in database`, 'success');
      }
      
    } catch (err) {
      log(`‚ùå Connection test failed: ${err.message}`, 'error');
    }
  }

  async function testAuthProviders() {
    log('Testing authentication providers...');
    
    try {
      const { createClient } = await import('@supabase/supabase-js');
      const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
      const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
      const supabase = createClient(supabaseUrl, supabaseAnonKey);
      
      // Get auth session
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error) {
        log(`‚ùå Auth session error: ${error.message}`, 'error');
      } else if (session) {
        log(`‚úÖ User already authenticated: ${session.user.email}`, 'success');
      } else {
        log('‚ÑπÔ∏è No active session (user not logged in)', 'info');
      }
      
    } catch (err) {
      log(`‚ùå Auth provider test failed: ${err.message}`, 'error');
    }
  }

  async function testRegister() {
    log('Testing user registration...');
    
    const testEmail = `test.${Date.now()}@example.com`;
    const testPassword = 'TestPassword123!';
    const testUsername = `testuser${Date.now()}`;
    
    try {
      const { createClient } = await import('@supabase/supabase-js');
      const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
      const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
      const supabase = createClient(supabaseUrl, supabaseAnonKey);
      
      log(`Attempting to register: ${testEmail}`);
      log(`Username: ${testUsername}`);
      
      // Test registration
      const { data, error } = await supabase.auth.signUp({
        email: testEmail,
        password: testPassword,
        options: {
          data: {
            username: testUsername,
            display_name: testUsername
          }
        }
      });
      
      if (error) {
        log(`‚ùå Registration failed: ${error.message}`, 'error');
        
        if (error.message.includes('Email rate limit exceeded')) {
          log('üí° Too many registration attempts. Try again later.', 'warning');
        } else if (error.message.includes('Invalid email')) {
          log('üí° Email validation failed. Check Supabase auth settings.', 'warning');
        }
      } else {
        log('‚úÖ Registration successful!', 'success');
        log(`User ID: ${data.user?.id}`, 'success');
        log(`Email: ${data.user?.email}`, 'success');
        
        if (data.user && !data.session) {
          log('üìß Email confirmation required', 'warning');
        }
      }
      
    } catch (err) {
      log(`‚ùå Registration test failed: ${err.message}`, 'error');
    }
  }

  // Run initial diagnostics
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      log('üöÄ Auth debug terminal ready');
      log('Run tests above to diagnose authentication issues');
    }, 100);
  });
</script>