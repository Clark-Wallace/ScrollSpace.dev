---
import fs from 'fs';
import path from 'path';
import yaml from 'js-yaml';
import { marked } from 'marked';
import ProjectPreviewCard from '../../components/ProjectPreviewCard.astro';

export async function getStaticPaths() {
  const zonesDir = path.join(process.cwd(), 'content/zones');
  const files = fs.readdirSync(zonesDir).filter(file => file.endsWith('.yaml'));
  
  return files.map(file => ({
    params: { zone: file.replace('.yaml', '') }
  }));
}

const { zone } = Astro.params;

// Read the zone YAML file
const zonePath = path.join(process.cwd(), 'content/zones', `${zone}.yaml`);
const zoneContent = fs.readFileSync(zonePath, 'utf-8');
const zoneData = yaml.load(zoneContent) as any;

// Get projects list from zone data
const projects = zoneData.projects || [];

// Read project details
const projectDetails = projects.map((projectSlug: string) => {
  try {
    const projectPath = path.join(process.cwd(), 'content/projects', `${projectSlug}.md`);
    const projectContent = fs.readFileSync(projectPath, 'utf-8');
    
    // Extract title from markdown (first H1 or use slug as fallback)
    const titleMatch = projectContent.match(/^#\s+(.+)$/m);
    const title = titleMatch ? titleMatch[1] : projectSlug;
    
    // Extract first paragraph for preview
    const paragraphs = projectContent.split('\n\n');
    let preview = '';
    for (const paragraph of paragraphs) {
      if (!paragraph.startsWith('#') && paragraph.trim().length > 0) {
        preview = paragraph.trim().replace(/\[([^\]]+)\]\([^)]+\)/g, '$1'); // Remove markdown links
        break;
      }
    }
    
    return {
      slug: projectSlug,
      title: title,
      preview: preview || 'No preview available.',
      exists: true
    };
  } catch (error) {
    return {
      slug: projectSlug,
      title: projectSlug,
      preview: '',
      exists: false
    };
  }
});
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>ScrollSpace - {zoneData.title}</title>
  </head>
  <body class="bg-gray-50 min-h-screen">
    <main class="container mx-auto px-4 py-8">
      <header class="mb-8">
        <h1 class="text-4xl font-bold text-gray-900 mb-2">{zoneData.title}</h1>
        <p class="text-lg text-gray-600 mb-4">{zoneData.description}</p>
        {zoneData.tagline && (
          <p class="text-sm italic text-gray-500">{zoneData.tagline}</p>
        )}
      </header>

      <section>
        <h2 class="text-2xl font-semibold text-gray-800 mb-4">Projects in this Zone</h2>
        
        {projects.length > 0 ? (
          <div class="grid gap-4">
            {projectDetails.map((project: any) => (
              <ProjectPreviewCard
                title={project.title}
                zone={zoneData.title}
                slug={project.slug}
                preview={project.preview}
                exists={project.exists}
              />
            ))}
          </div>
        ) : (
          <p class="text-gray-600">No projects found in this zone yet.</p>
        )}
      </section>
    </main>
  </body>
</html>